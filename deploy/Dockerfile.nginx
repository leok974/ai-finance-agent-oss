## Multi-stage: build frontend assets then produce hardened edge image

FROM node:20-alpine AS webbuild
## Build metadata args (injected by outer build):
ARG WEB_BRANCH=unknown
ARG WEB_COMMIT=unknown
ARG WEB_BUILD_ID=not_set
WORKDIR /w
# Copy only manifest files first for dependency install.
COPY apps/web/package.json apps/web/pnpm-lock.yaml* ./apps/web/
WORKDIR /w/apps/web
RUN corepack enable && corepack prepare pnpm@latest --activate \
	&& pnpm install --frozen-lockfile

# Copy source (exclude node_modules via .dockerignore); copy only dirs needed for build
COPY apps/web/src ./src
COPY apps/web/index.html ./
COPY apps/web/tsconfig*.json ./
COPY apps/web/vite.config.ts ./
COPY apps/web/vitest.config.ts ./
COPY apps/web/tailwind.config.* ./
COPY apps/web/postcss.config.js ./
COPY apps/web/components.json ./
COPY apps/web/public ./public
COPY apps/web/scripts ./scripts

# Expose build metadata to the Vite build via env and a JSON stamp consumed by the app
ENV WEB_BRANCH=${WEB_BRANCH} \
	WEB_COMMIT=${WEB_COMMIT} \
	WEB_BUILD_ID=${WEB_BUILD_ID}

# Create a build-stamp file (must occur after src copied so it lands inside src/) then build
RUN echo '{"branch":"'"${WEB_BRANCH}"'","commit":"'"${WEB_COMMIT}"'","buildId":"'"${WEB_BUILD_ID}"'"}' > src/build-stamp.json \
 && pnpm build \
 && mkdir -p dist \
 && cp src/build-stamp.json dist/build.json

FROM nginx:1.27-alpine
ARG EDGE_GIT_COMMIT=unknown
ARG EDGE_BUILD_TIME=unknown

# Dist assets
COPY --from=webbuild /w/apps/web/dist /usr/share/nginx/html

# Version metadata
RUN mkdir -p /usr/share/nginx/html && echo "{\n  \"commit\": \"$EDGE_GIT_COMMIT\",\n  \"built_at\": \"$EDGE_BUILD_TIME\"\n}" > /usr/share/nginx/html/version.json

# Copy rendered nginx.conf if present (build context must include it); fallback to template
# We use a tiny shell to prefer rendered version without failing build if absent.
COPY ./deploy/nginx.conf /etc/nginx/nginx.conf.template
# Attempt to copy rendered file (if present). Docker lacks a native optional copy, so we stage directory then conditionally move.
RUN mkdir -p /tmp/nginx-conf-src && cp /etc/nginx/nginx.conf.template /tmp/nginx-conf-src/nginx.conf.template
COPY ./deploy/nginx.conf.rendered /tmp/nginx-conf-src/nginx.conf.rendered
RUN if [ -f /tmp/nginx-conf-src/nginx.conf.rendered ]; then cp /tmp/nginx-conf-src/nginx.conf.rendered /etc/nginx/nginx.conf; else cp /tmp/nginx-conf-src/nginx.conf.template /etc/nginx/nginx.conf; fi
RUN rm -f /etc/nginx/conf.d/default.conf 2>/dev/null || true

# Fast-fail asset integrity assertion (runs automatically via nginx official entrypoint)
COPY ./deploy/docker-entrypoint.d /docker-entrypoint.d
RUN chmod +x /docker-entrypoint.d/*.sh
