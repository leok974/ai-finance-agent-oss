"""transfer splits recurring

Revision ID: 959d7a221e2e
Revises: 5f780aef3f22
Create Date: 2025-09-03 21:35:03.544108

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '959d7a221e2e'
down_revision: Union[str, Sequence[str], None] = '5f780aef3f22'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recurring_series',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('merchant', sa.String(), nullable=False),
    sa.Column('avg_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('cadence', sa.String(), nullable=False),
    sa.Column('first_seen', sa.Date(), nullable=False),
    sa.Column('last_seen', sa.Date(), nullable=False),
    sa.Column('next_due', sa.Date(), nullable=True),
    sa.Column('sample_txn_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['sample_txn_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recurring_series_id'), 'recurring_series', ['id'], unique=False)
    op.create_index(op.f('ix_recurring_series_merchant'), 'recurring_series', ['merchant'], unique=False)
    op.create_table('transaction_splits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_txn_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['parent_txn_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transaction_splits_id'), 'transaction_splits', ['id'], unique=False)
    op.create_index(op.f('ix_transaction_splits_parent_txn_id'), 'transaction_splits', ['parent_txn_id'], unique=False)
    op.create_table('transfer_links',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('txn_out_id', sa.Integer(), nullable=False),
    sa.Column('txn_in_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['txn_in_id'], ['transactions.id'], ),
    sa.ForeignKeyConstraint(['txn_out_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('txn_out_id', 'txn_in_id', name='uq_transfer_pair')
    )
    op.create_index(op.f('ix_transfer_links_id'), 'transfer_links', ['id'], unique=False)
    # SQLite-safe column alterations via batch mode
    conn = op.get_bind()
    dialect_name = conn.engine.dialect.name if conn is not None else "sqlite"
    default_expr = sa.text("CURRENT_TIMESTAMP") if dialect_name == "sqlite" else sa.text("now()")

    with op.batch_alter_table('rules', schema=None) as b:
        b.alter_column('pattern', existing_type=sa.VARCHAR(length=256), nullable=False)
        b.alter_column('category', existing_type=sa.VARCHAR(length=128), nullable=False)
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=False, server_default=default_expr)

    with op.batch_alter_table('transactions', schema=None) as b:
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=False, server_default=default_expr)
        b.alter_column('updated_at', existing_type=sa.DateTime(timezone=True), nullable=False, server_default=default_expr)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    with op.batch_alter_table('user_labels', schema=None) as b:
        b.alter_column('txn_id', existing_type=sa.INTEGER(), nullable=False)
        b.alter_column('category', existing_type=sa.VARCHAR(length=128), nullable=False)
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=False, server_default=default_expr)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_labels', schema=None) as b:
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=True, server_default=None)
        b.alter_column('category', existing_type=sa.VARCHAR(length=128), nullable=True)
        b.alter_column('txn_id', existing_type=sa.INTEGER(), nullable=True)
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    with op.batch_alter_table('transactions', schema=None) as b:
        b.alter_column('updated_at', existing_type=sa.DateTime(timezone=True), nullable=True, server_default=None)
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=True, server_default=None)
    with op.batch_alter_table('rules', schema=None) as b:
        b.alter_column('created_at', existing_type=sa.DateTime(timezone=True), nullable=True, server_default=None)
        b.alter_column('category', existing_type=sa.VARCHAR(length=128), nullable=True)
        b.alter_column('pattern', existing_type=sa.VARCHAR(length=256), nullable=True)
    op.drop_index(op.f('ix_transfer_links_id'), table_name='transfer_links')
    op.drop_table('transfer_links')
    op.drop_index(op.f('ix_transaction_splits_parent_txn_id'), table_name='transaction_splits')
    op.drop_index(op.f('ix_transaction_splits_id'), table_name='transaction_splits')
    op.drop_table('transaction_splits')
    op.drop_index(op.f('ix_recurring_series_merchant'), table_name='recurring_series')
    op.drop_index(op.f('ix_recurring_series_id'), table_name='recurring_series')
    op.drop_table('recurring_series')
    # ### end Alembic commands ###
