[pytest]
addopts = -q -ra --import-mode=importlib --strict-markers
testpaths = tests
pythonpath = .

# Targeted warning filters (keep our own warnings visible)
filterwarnings =
    ignore:.*NameAttribute.* is deprecated.*:DeprecationWarning:cryptography\.
    ignore:.*is a deprecated alias.*:FutureWarning:pandas\.
    
    # httpx: raw/binary content kwarg deprecations (user-provided block)
    ignore:.*(raw|binary).*content.*deprecated.*:DeprecationWarning:httpx\.

    # statsmodels: time series index frequency/value warnings (user-provided block)
    ignore:.*No frequency information was provided.*:UserWarning:statsmodels\.
    ignore:.*An unsupported index was provided.*:UserWarning:statsmodels\.
    # statsmodels custom ValueWarning not globally importable; fallback to generic Warning
    ignore:.*A date index has been provided.*no associated frequency.*:Warning:statsmodels\.
    ignore:.*Too few observations to estimate starting parameters.*:UserWarning:statsmodels\.
    ignore:.*convergence achieved after.*:UserWarning:statsmodels\.
    # Use generic Warning (ValueWarning not importable on some Python builds)
    ignore:.*No supported index is available.*Prediction results will be given.*:Warning:statsmodels\.
    ignore:.*No supported index is available.*next version.*exception.*:FutureWarning:statsmodels\.

    # sqlite adapter deprecation (from upstream libs) (user-provided block)
    ignore:.*default date adapter is deprecated.*:DeprecationWarning:sqlalchemy\.

markers =
    ml: ML suggestion flow tests
    agent_tools: agent tool endpoints
    budget: budget agent tools
    insights: insights agent tools
    charts: charts agent tools
    rules: rules agent tools
    rotation: key rotation flows
    crypto: encryption/crypto behavior
    needs_llm: requires live LLM connectivity
    needs_kms: requires configured KMS (cloud KMS)
    slow: long-running analytics tests
    order: execution ordering marker used in ML tests
    integration: cross-endpoint integration flow tests

# Optional (uncomment to fail on any warning from our package)
# filterwarnings =
#     error::Warning:app\.
